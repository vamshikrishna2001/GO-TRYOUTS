package main

import (
	"fmt"
	"sync"
)

func generator(num ...int) <-chan int {
	ch := make(chan int)

	go func() {
		for _, i := range num {
			ch <- i
		}
		close(ch)

	}()
	return ch
}

func square(ch <-chan int) <-chan int {
	ch2 := make(chan int)
	go func() {
		for n := range ch {
			ch2 <- n * n
		}
		close(ch2)
	}()

	return ch2
}

func merge(cs ...<-chan int) <-chan int {
	out := make(chan int)
	var wg sync.WaitGroup

	output := func(c <-chan int) {
		for i := range c {
			out <- i
		}
		wg.Done()

	}
	wg.Add(len(cs))
	for _, c := range cs {
		go output(c)
	}

	go func() {
		wg.Wait()
		close(out)
	}()
	// the wait group is in a go routine because ...
	// in the main function we have generator go routine which is
	// it will be blocked ... if we don't the wait in another go routine

	return out
}

func main() {
	fmt.Println("hii")
	in := generator(4, 5, 6, 7, 8, 9, 123, 45, 67)

	ch1 := square(in)
	ch2 := square(in)

	go func() {
		for i := range ch1 {
			fmt.Println("in ch1")
			fmt.Println(i)
		}
	}()

	for i := range ch2 {
		fmt.Println("in ch2")
		fmt.Println(i)
	}
}
